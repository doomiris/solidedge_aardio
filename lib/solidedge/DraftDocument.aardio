//DraftDocument 常用函数

namespace solidedge;
class DraftDocument{
	ctor( seDFT ){
		this.seDFT = seDFT;
	};
	@_metaProperty;
}
namespace DraftDocument{
  import solidedge.application;
  import util.metaProperty; 
  _titleBlockNames = {"Title 2020", "Title", "Title-SRDC_V1", "Title-SRDC", "SRDC-Title"};
  _metaProperty = util.metaProperty( 
	get = function(k){
		return owner.seDFT[k];
	};
	set = function(k,v){
		owner.seDFT[k] = v;
	};
	application = {
		_get = function(){
			return solidedge.application();
		}
		_set = function(){
			//
		}
	}
	Activate = function(){
		owner.seDFT.Activate();
		sleep(500);
	};	
	getFirstSheet = function(){
		for (i=1; owner.Sheets.Count){
			if (owner.Sheets.item(i).SectionType == 0 /* igWorkingSection */)
				if (owner.Sheets.item(i).Number == 1)
					return owner.Sheets.item(i);
		}
	};

	getTitleBlock = function(seSht){
        for (i = 1;  seSht.BlockOccurrences.Count ) { //获取Titleblock
        	if ..table.find(_titleBlockNames, seSht.BlockOccurrences.Item(i).Block.Name)
        		return seSht.BlockOccurrences.Item(i);
        }
	};
	findTextFromBlkDef = function(_blk, str){
		if !_blk return null; 
        var txts = _blk.Block.Views.Item(1).TextBoxes;
        if (txts) {
            for (i = 1 ; txts.Count){
                var txt = txts.Item(i).Text;
                if (..string.trim(txt) == str) return ..string.replace(str,"J052005","J52005"); 
            }
        }
        return null;
	};
	getLabelTable = function(seBlk){
		if !seBlk return null; 
		var seLbs = seBlk.BlockLabelOccurrences;
		var tar = {};
		for (i=1; seLbs.Count){
    		tar[seLbs.item(i).Name] = ..string.trim(seLbs.item(i).Value);
    		if (seLbs.item(i).Name == "日期") { //旧模板命名问题: 重复日期
    			if (tar["日期"]){	
    				if (!tar["设计日期"]){
    					tar["设计日期"] = tar["日期"];
    					continue;
    				} else {
    					if (!tar["审核日期"]){
    						tar["审核日期"] = tar["日期"];
    						continue;
    					} else {
    							tar["批准日期"] := tar["日期"];
    					}
    				}
    			}
    		}
		}
		tar["专用号"] := tar["图号"];
		tar["版本"] := null;
		tar["名称(中文)"]:= tar["名称(中)"];	//旧模板命名问题
		tar["名称(英文)"]:= tar["名称(英)"];	//旧模板命名问题
		tar["零件名称"] := tar["名称(中文)"];
		tar["型号"] := tar["型  号"];			//旧模板命名问题
    	tar["型号/项目名称"] := tar["型号"];	//旧模板命名问题
    	tar["喷粉标准"] := owner.findTextFromBlkDef(seBlk,"Q/LD J052005");
    	tar["喷粉标准"] := owner.findTextFromBlkDef(seBlk,"Q/LD J52005");
    	tar["公差等级"] := owner.findTextFromBlkDef(seBlk,"GB/T 1804-m");
    	tar["公差等级"] := owner.findTextFromBlkDef(seBlk,"GB/T 1804-c");
    	tar["公差等级"] := owner.findTextFromBlkDef(seBlk,"GB/T 1804-v");
		return tar; 
	};
	getBlkByName = function(blkName, seSht){
        for (i = 1;  seSht.BlockOccurrences.Count )  //获取Titleblock
        	if seSht.BlockOccurrences.Item(i).Block.Name == blkName 
            	return seSht.BlockOccurrences.Item(i);
        return null; 
	}
	
	getSourcingType = function(seSht){
        var vblk = owner.getBlkByName("Version_CCR 2020",seSht);
        return owner.getValueFromBlk(vblk, "属性");
	}
	
	getLabelObjectTable = function(seBlk){
		if !seBlk return null; 
		var seLbs = seBlk.BlockLabelOccurrences;
		var tar = {};
		for (i=1; seLbs.Count; 1){
    		tar[seLbs.item(i).Name] = seLbs.item(i);
    		if (seLbs.item(i).Name == "日期") { //旧模板命名问题: 重复日期
    			if (tar["日期"]){	
    				if (!tar["设计日期"]){
    					tar["设计日期"] = tar["日期"];
    					continue;
    				} else {
    					if (!tar["审核日期"]){
    						tar["审核日期"] = tar["日期"];
    						continue;
    					} else {
    							tar["批准日期"] := tar["日期"];
    					}
    				}
    			}
    		}
		}
		tar["专用号"] := tar["图号"];
		
		tar["名称(中文)"]:= tar["名称(中)"];	//旧模板命名问题
		tar["名称(英文)"]:= tar["名称(英)"];	//旧模板命名问题
		tar["零件名称"] := tar["名称(中文)"];
		tar["型号"] := tar["型  号"];			//旧模板命名问题
    	tar["型号/项目名称"] := tar["型号"];	//旧模板命名问题
    	
    	if tar["喷粉标准"] tar["喷粉标准"].Value := owner.findTextFromBlkDef(seBlk,"Q/LD J052005");
    	if tar["喷粉标准"] tar["喷粉标准"].Value := owner.findTextFromBlkDef(seBlk,"Q/LD J52005");
    	if tar["公差等级"] tar["公差等级"].Value := owner.findTextFromBlkDef(seBlk,"GB/T 1804-m");
    	if tar["公差等级"] tar["公差等级"].Value := owner.findTextFromBlkDef(seBlk,"GB/T 1804-c");
    	if tar["公差等级"] tar["公差等级"].Value := owner.findTextFromBlkDef(seBlk,"GB/T 1804-v");
		return tar; 
	};
	getValueFromBlk = function(blk, lableName){
		var tar = owner.getLabelTable(blk);
		if tar return tar[lableName]; 
		else return null; 
	};
	firstTitleBlock = function(){
		return owner.getTitleBlock(owner.getFirstSheet());
	};
	getVerFromShtCorner = function(seSht){
		if !seSht seSht = owner.ActiveSheet;
		var	width = seSht.SheetSetup.SheetWidth * 1000;
        var txts = seSht.TextBoxes        
        for (i = 1 ; txts.Count){
            var x,y,z = txts.Item(i).GetOrigin();
            //..io.open()
            //..io.print(txts.Item(i).Text);
            //..io.Print txts.Item(i).Text, x * 1000, y * 1000, z * 1000
            if (..string.len(..string.trim(txts.Item(i).Text)) == 2) {
                if (x * 1000 > width * 0.94 && y * 1000 > 10) {
                    return ..string.trim(txts.Item(i).Text), txts.Item(i);
                }
            }
        }
	};
	getVerFromBlkCorner = function(_blk){
		if !_blk return null; 
        var txts = _blk.Block.Views.Item(1).TextBoxes;
        var txtbox = txts.Item(1);
        if (txts && txtbox) {
            var a,b,c = txtbox.GetOrigin ();
            //..io.open();
            //..io.print(a,b,c);
            for (i = 2 ; txts.Count){
                var x,y,z=txts.Item(i).GetOrigin ()
                if (x > a || y < b) {
                    txtbox = txts.Item(i);
                    a,b,c= txtbox.GetOrigin ();
                }
            }
        }
        
        if ..math.isInteger(txtbox.Text) and #txtbox.Text == 2
        		return ..string.trim(txtbox.Text);
        else
        		return null; 
	};
	getDftVer = function(){
		var qhc_ver;
        qhc_ver = owner.getValueFromBlk(owner.firstTitleBlock(),"版本");
		qhc_ver := owner.getVerFromShtCorner(owner.getFirstSheet()); //考虑到有些图纸里版本是写在右下角文本框里的, 不在Titleblock里, 则尝试读取右下角是否有文本框
		qhc_ver := owner.getVerFromBlkCorner(owner.firstTitleBlock()); //考虑到有些图纸里版本是写在Titleblock定义里, 则尝试读取Titleblock定义右下角是否有文本框
		return qhc_ver;
	};
	getFileName = function(){
		var p_number;
        p_number = ..string.upper(owner.Name);	
		p_number = ..string.trimright(p_number, ".DFT");
		// p_number = ..string.trimleft(p_number,"H"); //新要求:文件名不带H //2021.09.13取消要求
		return p_number; 
	};
	
	/* ====================== */
	name_cn = {
		_get = function(){
			return
				owner.formatWindowsFileName(
					owner.getValueFromBlk(owner.firstTitleBlock(), "零件名称")
				);
		}
		_set = function(){
			//
		}
	};

	/* ====================== */
	productRange = {
		_get = function(){
			return
				owner.formatWindowsFileName(
					owner.getValueFromBlk(owner.firstTitleBlock(), "型号/项目名称")
				);
		}
		_set = function(){
			//
		}
	};
	/* ====================== */
	
	formatWindowsFileName = function (nameStr) {
    	//替换Windows文件名非法字符为全角＼"／，．＜＞｜＊
    	nameStr = ..string.replace(nameStr, "@\", "＼");
    	nameStr = ..string.replace(nameStr, "@/", "／");
    	nameStr = ..string.replace(nameStr, "@:", "：");
    	nameStr = ..string.replace(nameStr, "@*", "x");
    	nameStr = ..string.replace(nameStr, "@?", "？");
    	nameStr = ..string.replace(nameStr, '\"', "“");   //替换双引号
    	nameStr = ..string.replace(nameStr, "@<", "＜");
    	nameStr = ..string.replace(nameStr, "@>", "＞");
    	nameStr = ..string.replace(nameStr, "@|", "｜");
    	nameStr = ..string.replace(nameStr, '\r', " ");  //替换回车符
    	nameStr = ..string.replace(nameStr, '\n', " ");  //替换换行符
    	return ..string.trim(nameStr);
	};

	getNameByExt = function(fileExt, nTab, toFolder){
		if owner.application.useQhcNameRule {
        		return
        			toFolder
        			++ "\"
        			++ (nTab ? nTab.物料 : owner.getFileName())
        			++ "-"
        			++ (nTab ? nTab.版本 : owner.getDftVer())
        			++ "版"
        			++ "-"
        			++ (nTab ? nTab.型号 : owner.productRange)
        			++ "-"
        			++ (nTab ? nTab.名称 : owner.name_cn)
        			++ fileExt;
		}
		else {
        		return
					toFolder
					++ "\"
					++ (nTab ? nTab.物料 : owner.getFileName())
					++ fileExt;
		}
	};
	saveToExt = function (fname) {
		if ..io.exist(fname) {
			if  ..io.remove(fname) == null {
				..win.msgbox( fname + "被占用, 此文件打印失败!");
				return false;
			}
		}
		var fileExt = ..string.lower(..table.pop(..string.split(fname,".")));
		var succ;
//		try{
    		select (fileExt){
        		case "dwg","pdf"{        		
        			owner.SaveCopyAs(fname);  //savecopyas 和 saveas 效果一样
        			succ = true; 
        		}
        		case "stp"{
        			owner.ModelLinks.item(1).ModelDocument.SaveCopyAs(fname);
        			succ = true; 
        		} 
        		case "dxf"{
        		    if (owner.ModelLinks.Item(1).ModelType == 0 /* igPartLink */){ 
        				var smDoc = owner.ModelLinks.item(1).ModelDocument;
	//        			var Nothing = ..com.VariantNull();   			
	//        			smDoc.Models.SaveAsFlatDXFEx(fname, Nothing , Nothing, Nothing, true);
        				import web.script;
        				var vm = web.script("VBScript") ;
        				vm.external = {smDoc : smDoc; fname : fname}
        				vm.addCode(`
        				Call external.smDoc.Models.SaveAsFlatDXFEx(external.fname,Nothing,Nothing,Nothing,True)
        				`);
	       				succ = true; 
	       			}
        		}
        		case "bmp"{
					var sw = owner.application.ActiveWindow;        			
        			for (i=1; owner.SheetGroups.Item(1).Sheets.Count){
        				owner.SheetGroups.Item(1).Sheets.Item(i).Activate();
        				sw.Fit();
        				var branch_name = ..string.replace(fname,"bmp", i ++ ".bmp");
						sw.SaveAsImage(branch_name, 1600, 960, 1, 24, 3 /* seImageQualityHigh */, false);
        			}
        			succ = true; 	
        		}
    		}
//		}
/*
		catch(e){
			..win.msgbox(e.description);
			succ = false; 
		}
*/
		return succ; 
	};
	getTitleBlockOrigin = function(seSht){
		seSht := owner.ActiveSheet;
		select(seSht.Background.Name) {
			case "A0-Sheet", "A0-KT" {
				return (1189-21.5) / 1000, 20 / 1000; 
			}
			case "A1-Sheet", "A1-KT" {
				return (841-21.5) / 1000, 20 / 1000; 
			}
			case "A2-Sheet", "A2-KT" {
				return (594-10) / 1000, 10 / 1000; 
			}
			case "A3-Sheet", "A3-KT" {
				return (420-10) / 1000, 10 / 1000; 
			}
			
			else {
				return 0,0; 
			}
		}
	}
	tabToBlk = function(oLbsTab, Blk){
		if !oLbsTab return; 
    	var nLbs = Blk.BlockLabelOccurrences;
		for (i=1; nLbs.Count; 1) {
			 nLbs.Item(i).Value = oLbsTab[nLbs.Item(i).Name]
		}
	}
	getRecordBase = function(seSht){	//TODO 报错不存在时
		seSht := owner.ActiveSheet;
        for (i = 1;  seSht.BlockOccurrences.Count ) {
            select  (seSht.BlockOccurrences.Item(i).Block.Name){
                case "变更记录表格 2020" {
                    var rt = seSht.BlockOccurrences.Item(i);
                    return rt ;
                }
            }
        }
        return null; 
	}
	insertRecordBase = function(seSht){
		seSht := owner.ActiveSheet;
		var x,y = owner.getTitleBlockOrigin(seSht);
		var recTab = owner.getRecordBase();
		if !(recTab) seSht.BlockOccurrences.Add("变更记录表格 2020", x, y + 48/1000);
	}
	
	insertRecordTabLine = function(seSht){
		seSht := owner.ActiveSheet;
		owner.insertRecordBase();
		var x,y = owner.getTitleBlockOrigin(seSht);

    	//获取x修改记录block, 由于实时删除, 需要反向循环
    	var gy = (48+6)/1000;	//变更记录y坐标
    	for (i = 1;  seSht.BlockOccurrences.Count ) { 
        	select  (seSht.BlockOccurrences.Item(i).Block.Name){
            	case "变更记录 2020" {
                	gy += 6/1000;
            	}
        	}
    	}
		var nxblk = seSht.BlockOccurrences.Add("变更记录 2020", x, y+gy);
		return nxblk;
	}
	getTopRecordMark = function(seSht){
		seSht := owner.ActiveSheet;
		var topRec, a, b, c
    	for (i = 1;  seSht.BlockOccurrences.Count ) { 
        	select  (seSht.BlockOccurrences.Item(i).Block.Name){
            	case "变更记录", "变更记录 2020" {
            		topRec := seSht.BlockOccurrences.Item(i);
            		if (!a) a,b,c = topRec.getOrigin();
            		var x,y,z = seSht.BlockOccurrences.Item(i).getOrigin();
            		if ( y > b ){
            			topRec = seSht.BlockOccurrences.Item(i);
            			a, b, c = x, y, z;
            		}
            	}
        	}
    	}
    	if !topRec return null ; 
    	var lb = owner.getLabelTable(topRec);
    	return lb["标记"]; 
	}
	
	
  )
}
namespace DraftDocument{
	replaceNewTitleBlock = function(DFT){
		_tPath = "\\ccnsia1a\separts\Admin\Templates\Solidedge_Template\Template_2020\Draft.dft";
		import solidedge.application;
		var seApp = solidedge.application();
		DFT := seApp.ActiveDocument;
		var seDFT = ..solidedge.DraftDocument(DFT);	//当前文件
		var Sht = seDFT.ActiveSheet;
		var x,y = seDFT.getTitleBlockOrigin(Sht);
		
		// 从模版获取全部新的block定义;
		var newDFT = seApp.Open(_tPath, true);	//模版文件
		for (i = 1; newDFT.Blocks.Count; 1)
			seDFT.Blocks.CopyBlock (newDFT.Blocks.item(i));		//todo:  旧图纸tb名称不规范, 背景名称不规范的处理
		newDFT.Close(false);
		// 获取当前旧的title block定义;
		//var oLbsTab={};
		//var seBlkTab = {};
		//var neBlkTab = {};
	var oldBlockName;
	for (j=1; seDFT.SheetGroups.Item(1).Sheets.Count){
		var sesht = seDFT.SheetGroups.Item(1).Sheets.Item(j)
		var seBlk = seDFT.getTitleBlock(sesht);
		oldBlockName := seBlk.Block.Name;
		//..table.push(seBlkTab, seBlk);
		
		var oLbs = seDFT.getLabelTable(seBlk); //获取旧Title Block数据
		if !oLbs["版本"]{
			oLbs["版本"], txtItem = seDFT.getVerFromShtCorner(sesht);
			if txtItem txtItem.Delete();
		}
		//..table.push(oLbsTab, oLbs);
		
		var neBlk = sesht.BlockOccurrences.Add("Title 2020", x, y); // 插入新Title Block
		//..table.push(neBlkTab, neBlk);
		//解决名称合并后有多行的显示问题, TODO: 对齐方式改进
		if oLbs{
			oLbs["零件名称"] := (function(a,b){
				if  b and ..string.len(..string.trim(b))>0 
					return a ++ '\n' ++ b;	//旧模板命名问题
				else 
					return a;
			})(oLbs["名称(中文)"], oLbs["名称(英文)"]);
			
			if (#oLbs["零件名称"] && ..string.indexOf(oLbs["零件名称"], '\r')){
				var newTitleBlockLableObject = seDFT.getLabelObjectTable(neBlk);
				newTitleBlockLableObject["零件名称"].Style.Height = 3 / 1000
    			newTitleBlockLableObject["零件名称"].OriginLocation = 7 /* igBlockLabelBottomCenter */
    			newTitleBlockLableObject["零件名称"].BlockLabel.OriginLocation = 7 /* igBlockLabelBottomCenter */
			}
		}
		seDFT.tabToBlk(oLbs, neBlk); //数据写入新Title Block
		
		//替换新图框
		select (sesht.Background.Name) {
			case "A3-Sheet", "A2-Sheet" {
         		sesht.Background.ReplaceBackground(_tPath, sesht.Background.Name); 
			}
		}
		// 检查如果有旧的变更记录就添加新格式变更记录block
    	for (i = sesht.BlockOccurrences.Count; 1; -1 ) { //获取Titleblock
        	select  (sesht.BlockOccurrences.Item(i).Block.Name){
            	case "变更修改" {
                	sesht.BlockOccurrences.Add("变更记录表格 2020", x, y + 48/1000);
               		break;
            	}
        	}
    	}
    	//获取x修改记录block, 由于实时删除, 需要反向循环
    	var gy = (48+6)/1000;	//变更记录y坐标
    	for (i = sesht.BlockOccurrences.Count; 1;  -1 ) { 
    		var xblk = sesht.BlockOccurrences.Item(i);
        	select  (xblk.Block.Name){
            	case "变更修改" {
                	var xblklbs = seDFT.getLabelTable(xblk);
               		var nxblk = sesht.BlockOccurrences.Add("变更记录 2020", x, y + gy);
               		seDFT.tabToBlk(xblklbs, nxblk);
               		xblk.Delete();
               		gy += 6/1000;
            	}
        	}
    	}
	}
		
		
		//删除旧Title Block
		try{
			seDFT.Blocks.Item(oldBlockName).Delete();
		}
		
		

	}

	
}

/**intellisense()
solidedge.DraftDocument = DraftDocument 支持库
solidedge.DraftDocument() = !DraftDocument.
!DraftDocument.getTitleBlock(_seSht) = return title block object
!DraftDocument.getLabelTable(_blk) = return lables table (lbl[name]=value)
!DraftDocument.getLabelObjectTable(_blk)  = return lable objects table (lbl[name].value=value)
!DraftDocument.getValueFromBlk(_blk,_lblName) = return lable value by name
!DraftDocument.getVerFromShtCorner(_seSht) = return Ver value from sht rt_bt conrner
!DraftDocument.getVerFromBlkCorner(_blk) = return Ver value from title block def
!DraftDocument.closeDft(seApp) = 关闭所有DFT, 按CTRL键放弃保存
!DraftDocument.getDftVer() = 用尽办法查找版本号
!DraftDocument.getFileName() = 从seDFT.Name获取专用号
!DraftDocument.getNameByExt(fileExt, nTab, toFolder) = 按规则生成文件名
!DraftDocument.saveToExt(fname) = 另存为其它格式
!DraftDocument.getTitleBlockOrigin(seSht) = 获取坐标(x,y)
!DraftDocument.tabToBlk(oLbsTab, Blk) = lable table write to block;
!DraftDocument.replaceNewTitleBlock(seDft, seSht) = replace with new title block 2020;
!DraftDocument.getFirstSheet() = return first sheet object; 
!DraftDocument.ActivePrintingSheet = Returns the Sheet object currently being printed;
!DraftDocument.ActiveSection = Returns the active sheet's Section object; Sheets are grouped into sections: WorkingSection, BackgroundSection, and 2dModelSection;
!DraftDocument.ActiveSectionType = Specifies the type of Section that the active sheet is a member of;
!DraftDocument.ActiveSheet = Returns the active Sheet object;
!DraftDocument.ActiveSketch = Returns the active Sketch object;
!DraftDocument.AddInsStorage = Returns an IUnknown pointer to the object that implements the IStorage corresponding to the add-in substorage for the referenced object;
!DraftDocument.Application = Returns the active application object;
!DraftDocument.AttributeQuery = Returns the AttributeQuery object;
!DraftDocument.Blocks = Returns the collection of blocks in the document;
!DraftDocument.BlockTableEvents = Contains the AfterUpdate event;
!DraftDocument.BlockTables = Returns the associated BlockTables object for the referenced DraftDocument object;
!DraftDocument.ConductorTables = Returns the associated ConductorTables object for the referenced DraftDocument object;
!DraftDocument.ConnectorTableEvents = Contains the AfterUpdate event;
!DraftDocument.ConnectorTables = Returns the associated ConnectorTables object for the referenced DraftDocument object;
!DraftDocument.CreatedVersion = Returns the version of Solid Edge that was used to create the referenced document;
!DraftDocument.DashStyles = This read-only property returns the DashStyles collection object for the referenced DraftDocument object;
!DraftDocument.DimensionStyles = Returns the DimensionStyles collection object for the referenced document;
!DraftDocument.Dirty = Specifies whether or not the referenced document has been modified since the last time it was saved;
!DraftDocument.DisplayAlignmentIndicator = Sets and returns whether or not the alignment indicator is displayed;
!DraftDocument.DisplayRelationshipHandles = Sets and returns whether or not relationship handles are displayed;
!DraftDocument.DocumentEvents = Returns the DocumentEvents object for the referenced document object;
!DraftDocument.DraftBendTableEvents = Contains the AfterUpdate event;
!DraftDocument.DraftBendTables = Returns the associated DraftBendTables object for the referenced DraftDocument object;
!DraftDocument.DrawingViewEvents = Returns the DrawingViewEvents object for the referenced DraftDocument object;
!DraftDocument.DrawingViewStyles = Returns the DrawingViewStyles collection object for the referenced document;
!DraftDocument.FeatureControlFrameDataSets = Returns the FeatureControlFrameDataSets collection object for the referenced document;
!DraftDocument.FilePreferences = Get and set file level preferences;
!DraftDocument.FillStyles = Returns the FillStyles collection object for the referenced document;
!DraftDocument.FOPTables = Returns the associated FOPTables object for the referenced DraftDocument object;
!DraftDocument.FullName = Returns the name and path of the referenced object;
!DraftDocument.HatchPatternStyles = Returns the HatchPatternStyles collection object for the referenced document;
!DraftDocument.HighlightSets = Returns the HighlightSets collection object for the referenced document object;
!DraftDocument.HoleTables = Returns the HoleTables collection object;
!DraftDocument.HoleTables2 = Returns the associated HoleTables2 object for the referenced DraftDocument object;
!DraftDocument.InactiveDrawingViewMode = Sets and returns the inactive drawing view mode on the document;
!DraftDocument.InPlaceActivated = Specifies whether or not the referenced document is in-place activated;
!DraftDocument.IsInsightFile = Returns indication of whether the file is an Insight managed file;
!DraftDocument.IsTemplate = Specifies whether or not the referenced document is a template;
!DraftDocument.LastSavedVersion = Returns the version of Solid Edge that was used the last time the referenced document was saved;
!DraftDocument.LinearStyles = Returns the LinearStyles collection object for the referenced document;
!DraftDocument.LocateBackgroundSheetGeometry = Sets and returns whether or not background sheet geometry is locatable from working sheet;
!DraftDocument.MaintainAlignmentSet = Sets and returns the option to Maintain Alignement Set;
!DraftDocument.MaintainRelationships = Returns whether maintain relationships is enabled or disabled
!DraftDocument.ModelLinks = Returns the ModelLinks collection object for the referenced document;
!DraftDocument.Name = Returns the name of the referenced object;
!DraftDocument.NamedViews = Returns the NamedViews automation object;
!DraftDocument.Parent = Returns the parent object for the referenced object;
!DraftDocument.PartsListEvents = Contains the AfterUpdate event;
!DraftDocument.PartsLists = Returns the associated PartsLists object for the referenced DraftDocument object;
!DraftDocument.Path = Returns the directory path name of the referenced document;
!DraftDocument.Properties = For document objects, returns the PropertiesCollection colletion object; For Variables, sets and returns the variable properties;
!DraftDocument.QuicksheetTemplateCount = Returns the count of Quicksheet drawing views;
!DraftDocument.ReadOnly = Specifies whether or not the referenced document has been opened as read-only;
!DraftDocument.RootStorage = Returns the IUnknown pointer to the object implementing the root storage of the referenced document;
!DraftDocument.RoutingSlip = Returns the RoutingSlip object for the referenced document;
!DraftDocument.Sections = Returns the Sections collection object for the referenced document; Sheets are grouped into sections: WorkingSection, BackgroundSection, and 2dModelSection;
!DraftDocument.SelectSet = Returns the current selection set for the referenced document;
!DraftDocument.SheetGroups = Returns a collection of working sheet groups;
!DraftDocument.Sheets = Returns a collection of sheets that belong to the referenced object;
!DraftDocument.SmartFrame2dStyles = Returns the SmartFrames2d collection object for the referenced document;
!DraftDocument.Status = Returns the status of the specified object;
!DraftDocument.SummaryInfo = Returns a SheetSummaryInfo object to provide access to descriptive properties for the referenced document;
!DraftDocument.SurfaceFinishSymbolDataSets = Returns the SurfaceFinishSymbolDataSets collection object for the referenced document;
!DraftDocument.SymbolProperties = Returns the SymbolProperties collection object for the referenced document;
!DraftDocument.Tables = Returns the collection of user tables in the document;
!DraftDocument.TableStyles = Returns the TableStyles collection;
!DraftDocument.TextCharStyles = Returns the TextCharStyles collection object for the referenced document;
!DraftDocument.TextStyles = Returns the TextStyles collection object for the referenced document;
!DraftDocument.ToleranceTables = Returns the associated ToleranceTables object for the referenced DraftDocument object;
!DraftDocument.Type = Specifies the type of the object being referenced;
!DraftDocument.UndoSteps = This read-write Long property sets and returns the number of undo steps for the referenced document object;
!DraftDocument.UnitsOfMeasure = Returns the UnitsOfMeasure object for the referenced document;
!DraftDocument.Variables = Returns the Variables collection object for the referenced document;
!DraftDocument.WeldSymbolDataSets = Returns the WeldSymbolDataSets collection object for the referenced document;
!DraftDocument.Windows = Returns the Windows collection object;
?solidedge.DraftDocument = !DraftDocument.
end intellisense**/