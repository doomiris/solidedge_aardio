//DraftDocument 常用函数
namespace solidedge;
class DraftDocument{
	ctor( seDFT ){
		this.seDFT = seDFT;
	};
	@_metaProperty;
}
namespace DraftDocument{
  import solidedge.application;
  import util.metaProperty; 
  _metaProperty = util.metaProperty( 
	get = function(k){
		return owner.seDFT[k];
	};
	set = function(k,v){
		owner.seDFT[k] = v;
	};
	application = {
		_get = function(){
			return solidedge.application();
		}
		_set = function(){
			//
		}
	} 
	getFirstSheet = function(){
		for (i=1; owner.Sheets.Count; 1){
			if (owner.Sheets.item(i).SectionType == 0 /* igWorkingSection */)
				if (owner.Sheets.item(i).Number == 1)
					return owner.Sheets.item(i);
		}
	};
	getTitleBlock = function(seSht){
        for (i = 1;  seSht.BlockOccurrences.Count ) { //获取Titleblock
            select  (seSht.BlockOccurrences.Item(i).Block.Name){
                case "Title 2020", "Title", "Title-SRDC_V1", "Title-SRDC" {
                    var titleblk = seSht.BlockOccurrences.Item(i);
                    return titleblk ;
                }
            }
        }
	};
	findTextFromBlkDef = function(_blk, str){
		if !_blk return null; 
        var txts = _blk.Block.Views.Item(1).TextBoxes;
        if (txts) {
            for (i = 1 ; txts.Count){
                var txt = txts.Item(i).Text;
                if (..string.trim(txt) == str) return ..string.replace(str,"J052005","J52005"); 
            }
        }
        return null;
	};
	getLabelTable = function(seBlk){
		var seLbs = seBlk.BlockLabelOccurrences;
		var tar = {};
		for (i=1; seLbs.Count; 1){
    		tar[seLbs.item(i).Name] = ..string.trim(seLbs.item(i).Value);
    		if (seLbs.item(i).Name == "日期") { //旧模板命名问题: 重复日期
    			if (tar["日期"]){	
    				if (!tar["设计日期"]){
    					tar["设计日期"] = tar["日期"];
    					continue;
    				} else {
    					if (!tar["审核日期"]){
    						tar["审核日期"] = tar["日期"];
    						continue;
    					} else {
    							tar["批准日期"] := tar["日期"];
    					}
    				}
    			}
    		}
		}
		tar["专用号"] := tar["图号"];
		tar["零件名称"] := tar["名称(中文)"];
    	tar["型号/项目名称"] := tar["型  号"];	//旧模板命名问题
    	tar["喷粉标准"] := owner.findTextFromBlkDef(seBlk,"Q/LD J052005");
    	tar["喷粉标准"] := owner.findTextFromBlkDef(seBlk,"Q/LD J52005");
    	tar["公差等级"] := owner.findTextFromBlkDef(seBlk,"GB/T 1804-m");
    	tar["公差等级"] := owner.findTextFromBlkDef(seBlk,"GB/T 1804-c");
    	tar["公差等级"] := owner.findTextFromBlkDef(seBlk,"GB/T 1804-v");
		return tar; 
	};
	getLabelObjectTable = function(seBlk){
		var seLbs = seBlk.BlockLabelOccurrences;
		var tar = {};
		for (i=1; seLbs.Count; 1){
    		tar[seLbs.item(i).Name] = seLbs.item(i);
    		if (seLbs.item(i).Name == "日期") { //旧模板命名问题: 重复日期
    			if (tar["日期"]){	
    				if (!tar["设计日期"]){
    					tar["设计日期"] = tar["日期"];
    					continue;
    				} else {
    					if (!tar["审核日期"]){
    						tar["审核日期"] = tar["日期"];
    						continue;
    					} else {
    							tar["批准日期"] := tar["日期"];
    					}
    				}
    			}
    		}
		}
		tar["专用号"] := tar["图号"];
		tar["零件名称"] := tar["名称(中文)"];
    	tar["型号/项目名称"] := tar["型  号"];	//旧模板命名问题
    	tar["喷粉标准"].Value := owner.findTextFromBlkDef(seBlk,"Q/LD J052005");
    	tar["喷粉标准"].Value := owner.findTextFromBlkDef(seBlk,"Q/LD J52005");
    	tar["公差等级"].Value := owner.findTextFromBlkDef(seBlk,"GB/T 1804-m");
    	tar["公差等级"].Value := owner.findTextFromBlkDef(seBlk,"GB/T 1804-c");
    	tar["公差等级"].Value := owner.findTextFromBlkDef(seBlk,"GB/T 1804-v");
		return tar; 
	};
	getValueFromBlk = function(blk, lableName){
		var tar= owner.getLabelTable(blk);
		return tar[lableName]; 
	};
	firstTitleBlock = function(){
		return owner.getTitleBlock(owner.getFirstSheet());
	};
	getVerFromShtCorner = function(seSht){
		var	width = seSht.SheetSetup.SheetWidth * 1000;
        var txts = seSht.TextBoxes        
        for (i = 1 ; txts.Count){
            var x,y,z=txts.Item(i).GetOrigin( )
            //Debug.Print txts.Item(i).Text, x * 1000, y * 1000, z * 1000
            if (..string.len(..string.trim(txts.Item(i).Text)) == 2) {
                if (x * 1000 > width * 0.94 && y * 1000 > 10) {
                    return ..string.trim(txts.Item(i).Text)
                }
            }
        }
	};
	getVerFromBlkCorner = function(_blk){
		if !_blk return null; 
        var txts = _blk.Block.Views.Item(1).TextBoxes;
        var txtbox = txts.Item(1);
        if (txts && txtbox) {
            var a,b,c=txtbox.GetOrigin ( )
            for (i = 2 ; txts.Count){
                var x,y,z=txts.Item(i).GetOrigin ()
                if (x > a || y < b) {
                    txtbox = txts.Item(i);
                    a,b,c=txtbox.GetOrigin ();
                }
            }
        }
        return ..string.trim(txtbox.Text)
	};
	getDftVer = function(){
		var qhc_ver;
        qhc_ver = owner.getValueFromBlk(owner.firstTitleBlock(),"版本");
		qhc_ver := owner.getVerFromShtCorner(owner.getFirstSheet()); //考虑到有些图纸里版本是写在右下角文本框里的, 不在Titleblock里, 则尝试读取右下角是否有文本框
		qhc_ver := owner.getVerFromBlkCorner(owner.firstTitleBlock()); //考虑到有些图纸里版本是写在Titleblock定义里, 则尝试读取Titleblock定义右下角是否有文本框
		return qhc_ver;
	};
	getFileName = function(){
		var p_number;
        p_number = ..string.upper(owner.Name);	
		p_number = ..string.trimright(p_number, ".DFT");
		p_number = ..string.trimleft(p_number,"H"); //新要求:文件名不带H
		return p_number; 
	};
	
	/* ====================== */
	name_cn = {
		_get = function(){
			return
				owner.formatWindowsFileName(
					owner.getValueFromBlk(owner.firstTitleBlock(), "零件名称")
				);
		}
		_set = function(){
			//
		}
	};


	/* ====================== */
	
	formatWindowsFileName = function (nameStr) {
    	//替换Windows文件名非法字符为全角＼／，．＜＞｜＊
    	nameStr = ..string.replace(nameStr, "\\", "＼");
    	nameStr = ..string.replace(nameStr, "/", "／");
    	nameStr = ..string.replace(nameStr, "\:", "：");
    	nameStr = ..string.replace(nameStr, "*", "x");
    	nameStr = ..string.replace(nameStr, "?", "？");
    	nameStr = ..string.replace(nameStr, '"', "“");   //替换双引号
    	nameStr = ..string.replace(nameStr, "\<", "＜");
    	nameStr = ..string.replace(nameStr, "\>", "＞");
    	nameStr = ..string.replace(nameStr, "|", "｜");
    	nameStr = ..string.replace(nameStr, "\r\n", " ");  //替换回车符
    	return ..string.trim(nameStr);
	};
	getRule = function(){
		var tRule;
    	if (owner.firstTitleBlock()) {
        	if (!owner.getDftVer()) {
            	tRule=0;	//如果无法获取版本号
        	}else{
            	if (..string.len(owner.name_cn) == 0 && owner.application.nameRule == 2) {
                	tRule = 1;   //如果名称为空时使用规则1
            	} else {
                	tRule = owner.application.nameRule;    //使用用户设定的规则
            	}
        	}
    	}else{
        	tRule = 0;   //如果无法获取titleblock, 使用规则0
    	}
    	return  tRule; 
	}
	getNameByExt = function(fileExt){
		select  (owner.getRule())    {//命名规则
    		case 0 {
        		return
					owner.application.toFolder
					++ "\"
					++ owner.getFileName()
					++ fileExt;
    		}
    		case 1 {
        		return
        			owner.application.toFolder
        			++ "\"
        			++ owner.getFileName()
        			++ "-"
        			++ owner.getDftVer()
        			++ "版"
        			++ fileExt;
    		}
    		case 2 {
        		return
        			owner.application.toFolder
        			++ "\"
        			++ owner.getFileName()
        			++ "-"
        			++ owner.getDftVer()
        			++ "版"
        			++ "-"
        			++ owner.name_cn
        			++ fileExt;
    		}
		}
	};
	saveToExt = function (fname) {
		var fileExt = ..string.lower(..table.pop(..string.split(fname,".")));
		try{
    		select (fileExt){
        		case "dwg","pdf"{        		
        			owner.SaveCopyAs(fname);  //savecopyas 和 saveas 效果一样
        		}
        		case "stp"{
        			owner.ModelLinks.item(1).ModelDocument.SaveCopyAs(fname);
        		} 
        		case "dxf"{        				
        			var smDoc = owner.ModelLinks.item(1).ModelDocument;
        			import web.script;
        			var vm=web.script("VBScript") ;
        			vm.external ={
        				smDoc = function(){return smDoc}; 
        				fname = function(){return fname}        					
        			}
        			vm.addCode("Call external.smDoc.Models.SaveAsFlatDXFEx(external.fname,Nothing,Nothing,Nothing,True)");
        		} 
    		}
		}
		catch(e){
			//console.log(e)
			//console.pause(false)
		}
	};
	getTitleBlockOrigin = function(seSht){
		select(seSht.Background.Name) {
			case "A2-Sheet" {
				return 584 / 1000, 10 / 1000; 
			}
			case "A3-Sheet" {
				return 410 / 1000, 10 / 1000; 
			}
			else {
				return 0,0; 
			}
		}
	}
	tabToBlk = function(oLbsTab, Blk){
    	var nLbs = Blk.BlockLabelOccurrences;
		for (i=1; nLbs.Count; 1) {
			nLbs.Item(i).Value = oLbsTab[nLbs.Item(i).Name]
		}
	}

	
  )
}
namespace DraftDocument{
	replaceNewTitleBlock = function(DFT,Sht){
		_tPath = "\\ccnsia1a\separts\Admin\Templates\Solidedge_Template\Template_2020\Draft.dft";
		var seDFT = ..solidedge.DraftDocument(DFT);	//当前文件
		// 获取当前旧的title block定义;
		var seBlk = seDFT.getTitleBlock(Sht);
		// 从模版获取全部新的block定义;
		var newDFT = seDFT.Parent.Documents.Open(_tPath);	//模版文件
		newDFT.Readonly = true;
		for (i = 1; newDFT.Blocks.Count; 1)
			seDFT.Blocks.CopyBlock (newDFT.Blocks.item(i));
		newDFT.Close(false);
		// 插入新Title Block
		var x,y = seDFT.getTitleBlockOrigin(Sht);
		var neBlk = Sht.BlockOccurrences.Add("Title 2020", x, y);
	
		//获取旧Title Block数据
		var oLbsTab = seDFT.getLabelTable(seBlk);
		
		//解决名称合并后有多行的显示问题, TODO: 对齐方式改进
		oLbsTab["零件名称"] := (function(a,b){
			if  b and ..string.len(..string.trim(b))>0 
				return a ++ '\n' ++ b;	//旧模板命名问题
			else 
				return a;
		})(oLbsTab["名称(中文)"], oLbsTab["名称(英文)"]);
		if (..string.indexOf(oLbsTab["零件名称"], '\r')){
			var newTitleBlockLableObject = seDFT.getLabelObjectTable(neBlk);
			newTitleBlockLableObject["零件名称"].Style.Height = 3 / 1000
    		newTitleBlockLableObject["零件名称"].OriginLocation = 7 /* igBlockLabelBottomCenter */
    		newTitleBlockLableObject["零件名称"].BlockLabel.OriginLocation = 7 /* igBlockLabelBottomCenter */
		}
		//数据写入新Title Block
		seDFT.tabToBlk(oLbsTab, neBlk);	
		
		//删除旧Title Block
		seDFT.Blocks.Item(seBlk.Block.Name).Delete();
		
		//替换新图框
		select (Sht.Background.Name) {
			case "A3-Sheet", "A2-Sheet" {
         		Sht.Background.ReplaceBackground(_tPath, Sht.Background.Name); 
			}
		} 
		
		// 检查如果有旧的变更记录就添加新格式变更记录block
    	for (i = 1;  Sht.BlockOccurrences.Count ) { //获取Titleblock
        	select  (Sht.BlockOccurrences.Item(i).Block.Name){
            	case "变更修改" {
                	Sht.BlockOccurrences.Add("变更记录表格 2020", x, y + 48/1000);
               		break;
            	}
        	}
    	}
    	//获取x修改记录block, 由于实时删除, 需要反向循环
    	var gy = (48+6)/1000;	//变更记录y坐标
    	for (i = Sht.BlockOccurrences.Count; 1;  -1 ) { 
    		var xblk = Sht.BlockOccurrences.Item(i);
        	select  (xblk.Block.Name){
            	case "变更修改" {
                	var xblklbs = seDFT.getLabelTable(xblk);
               		var nxblk = Sht.BlockOccurrences.Add("变更记录 2020", x, y + gy);
               		seDFT.tabToBlk(xblklbs, nxblk);
               		xblk.Delete();
               		gy += 6/1000;
            	}
        	}
    	}
	}  
}

/**intellisense()
solidedge.DraftDocument = DraftDocument 支持库
solidedge.DraftDocument() = !DraftDocument.
!DraftDocument.getTitleBlock(_seSht) = return title block object
!DraftDocument.getLabelTable(_blk) = return lables table (lbl[name]=value)
!DraftDocument.getLabelObjectTable(_blk)  = return lable objects table (lbl[name].value=value)
!DraftDocument.getValueFromBlk(_blk,_lblName) = return lable value by name
!DraftDocument.getVerFromShtCorner(_seSht) = return Ver value from sht rt_bt conrner
!DraftDocument.getVerFromBlkCorner(_blk) = return Ver value from title block def
!DraftDocument.closeDft(seApp) = 关闭所有DFT, 按CTRL键放弃保存
!DraftDocument.getDftVer() = 用尽办法查找版本号
!DraftDocument.getFileName() = 从seDFT.Name获取专用号
!DraftDocument.getNameByExt(fileExt) = 按规则生成文件名
!DraftDocument.saveToExt(fname) = 另存为其它格式
!DraftDocument.getTitleBlockOrigin(seSht) = 获取坐标(x,y)
!DraftDocument.tabToBlk(oLbsTab, Blk) = lable table write to block;
!DraftDocument.replaceNewTitleBlock(seDft, seSht) = replace with new title block 2020;
?solidedge.DraftDocument = !DraftDocument.
end intellisense**/