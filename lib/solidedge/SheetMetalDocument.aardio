//SheetMetal 常用函数
import solidedge.application;
namespace solidedge;
class SheetMetalDocument{
	ctor( sePSM ){
		if !sePSM
			this.sePSM = ..solidedge.application().ActiveDocument;
		else
			this.sePSM = sePSM;
	};
	@_metaProperty;
}
namespace SheetMetalDocument{
  import util.metaProperty; 
  _metaProperty = util.metaProperty( 
	get = function(k){
		return owner.sePSM[k];
	};
	set = function(k,v){
		owner.sePSM[k] = v;
	};
	application = {
		_get = function(){
			return ..solidedge.application();
		}
		_set = function(){
			//
		}
	} 
	addFlatPattern = function(objDoc){
		import console
		//console.open();
       	if !objDoc objDoc = owner.sePSM;
       	var objFPM = objDoc.FlatPatternModels.Add(objDoc.Models.Item(1));
      	var objFaces = objFPM.Body.Faces(6 /* igQueryPlane */);
      	var fTab={};
      	for (i=1; objFaces.Count){
             	..table.push(fTab, objFaces.Item(i).Area || 0);
      	}
      	var m = ..table.indexOf(fTab, ..math.max(..table.unpack(fTab)));
    	var maxFace = objFaces.Item(m);
    	if maxFace.type !== 167551075 /*igFace */
    		console.error("maxFace error");
    	var objEdges = maxFace.Edges;
      	var longestEdge , max_d;
      	for (i=1; objEdges.Count){
             	var edge = objEdges.Item(i);
             	if edge.IsClosed continue;
             	longestEdge := edge;
             	var d = 0;
             	if edge.StartVertex and edge.EndVertex 
             		d = objDoc.MeasureDistance(edge.StartVertex,  edge.EndVertex, 1 /* MeasureDistanceTypeConstants_MinimumDistance */);
             	max_d := d
             	if d>max_d {
             		max_d = d;
             		longestEdge = edge;
             	}
      	}

    	var objFP	
    	try{
    	 	objFP = objFPM.FlatPatterns.Add(longestEdge, maxFace, longestEdge.EndVertex, 2 /* igFlattenPatternModelTypeFlattenAnything */);
	    }    
	    return objFP; 
	}
	recreateFlatPattern = function(smDoc){
		smDoc.FlatPatternModels[1].FlatPatterns[1].Delete();
		return smDoc.addFlatPattern();
	}
	
	psm2dxf = function(fname){
		var smDoc = owner.sePSM;
		if smDoc.FlatPatternModels.Count == 0
			owner.addFlatPattern();
		if smDoc.FlatPatternModels[1].FlatPatterns[1].Reference.type !== 167551075
			owner.recreateFlatPattern(smDoc);
		var maxFace = smDoc.FlatPatternModels[1].FlatPatterns[1].Reference;

    	var longestEdge , max_d;
		for index, loop in ..com.each(maxFace.Loops) {
			if loop.IsOuterLoop {
				var objEdges = loop.Edges;				
      			for (i=1; objEdges.Count){
             		var edge = objEdges.Item(i);
             		if edge.IsClosed continue;
             		longestEdge := edge;
             		var d = 0;
             		if edge.StartVertex and edge.EndVertex 
             			d = smDoc.MeasureDistance(edge.StartVertex,  edge.EndVertex, 1 /* MeasureDistanceTypeConstants_MinimumDistance */);
             		max_d := d
             		if d>max_d {
             			max_d = d;
             			longestEdge = edge;
             		}
      			}
			}
		}
    	var objFP;	
    	try{
    	    smDoc.Application.DisplayAlerts = 0;
	    	objFP = smDoc.Models.SaveAsFlatDXFEx(fname, maxFace, longestEdge, longestEdge.EndVertex, true);
	   		smDoc.Application.DisplayAlerts = 1;
	    }catch(e){
	    	console.error(e.description)
	    }
	}
	_topointer = lambda() owner.sePSM;
	
  )
}
namespace SheetMetalDocument{


}

/**intellisense()
solidedge.SheetMetalDocument = SheetMetalDocument 支持库
solidedge.SheetMetalDocument() = !SheetMetalDocument.
!SheetMetalDocument.addFlatPattern(_psmdoc) = add Flat Pattern 使用最大面, 及其最长边创建
!SheetMetalDocument.psm2dxf(_fname) = save as dxf
?solidedge.SheetMetalDocument = !SheetMetalDocument.
end intellisense**/