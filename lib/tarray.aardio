// tarray
var pop = ..table.pop;
var map = ..table.map;
var mapDeep = ..table.mapDeep;
var slice = ..table.slice;
var splice = ..table.splice;
var push = ..table.push;
var escape = ..string.escape;
var math = ..string.match;
var next = ..table.next;
var eachName = ..table.eachName;
var eachIndex = ..table.eachIndex;
var eachValue = ..table.eachValue;
var eachArgs = ..table.eachArgs;
var indexOf = ..table.indexOf;
var mixin = ..table.assign;
var join = ..string.join;
var unique = ..table.unique;
var trim = ..string.trim;
var len = ..string.len;

namespace tarray;
/* column operation */
serialize = function(arr){
	var t={};
	for (j=1; #arr){
		var b = {}
		for k,v in arr[j] 
			b[indexOf(arr.fields,k) ? indexOf(arr.fields,k): k] = v;
		push(t, b:"");
	}
	if arr.fields t.fields = arr.fields;
	return t; 
}
detach = function(arr){
	var t={};
	var f = {}
	for k,v in arr {
		push(t, v:"")
		push(f, k:"")
	}
	return t,f; 
}
detachBy = function(arr,fields){
	var t={};
	for k, v in fields 
		push(t, arr[v]:"");
	return t; 
}
transpose0 = function(arr){	
	if #arr.fields arr = serialize(arr);
	return map(arr[1], function(col, i){	//TODO: 单行转列有问题啊
		return map(arr, function(row){
		 	return row[i]; 
		})
	}) 
}
transposeSingle = function(arr){	
	return map(arr, function(col, i){	// 单行转列
		return {col}; 
	}) 
}
transpose = function(arr){
	var t = transpose0(arr);
	if #t == 1 return t[1];
	else return t; 
}
mapfields = function(arr, fields){
	var t={}
	if !fields if #arr.fields fields = arr.fields;
	if (#fields == 1) fields = fields[1];
	for(i=1; #arr){
		var cc={};
		for(j=1; #fields)
				cc[fields[j]] = arr[i][j] : "";
		t[i] = cc;
	}
	t.fields = fields;
	return t; 
}
popCol = function(arr,...){
	var fields = arr.fields
	pop(fields,...)
	arr = transpose0(arr);
	pop(arr,...);
	arr = transpose0(arr)	
	return mapfields(arr,fields); 
}
/*
sliceCol0 = function(arr,a,b){
	var t={};
	for k, v in arr
		t[k] = slice(v,a,b);
	return t; 
}
*/
sliceCol = function(arr,a,b){
	var fields = arr.fields;
	fields = slice(fields,a,b)	
	arr = transpose0(arr);
	arr = slice(arr,a,b);
	arr = transpose0(arr);
	return mapfields(arr,fields); 
}
spliceCol = function(arr,a,n =1){;
	for k,v in arr
		splice(v,a,n);
	return arr; 
}
uniqueCol = function(arr,col = 1){
	var fields = arr.fields;
	if arr.fields arr=serialize(arr);
	var t={};
	for (i=1; #arr) 
		if arr[i][col]	//跳过空值
			if !indexOf(getCol(t,col), arr[i][col]) //跳过重复值
				push(t, arr[i]:"");
	return mapfields(t,fields); 
}
uniqueByCol = function(arr,col){
	var t={};
	var ct = getCol(arr, col);
	ct = unique(ct);
	for k, v in arr {
		if !v	continue;//跳过空值
		if indexOf(ct, v[col]){ //跳过重复值
			push(t, v);
			..table.removeByValue(ct,v[col]);
		}
	}
	return t; 
}
getCol = function(arr, col){
	var colindex = #arr.fields ? indexOf(arr.fields, col) : col;
	return transpose0(arr)[colindex]; 
}
replaceValue = function(arr, searchFor, replaceBy){
	return mapDeep(arr,lambda(v,k) v == searchFor ? replaceBy : v); 
}
drop = function(arr, index){
	for(i=1; #arr)
		for(j=1; #arr[i])
			if j==index 
				arr[i][j] = null;
	return arr;
}
pushFields = function(arr, tab){
	var fields = {};
	for k, v in tab {
		push(fields, k:"")
	}
	arr.fields = fields;
	return arr; 
}
getIndexByKey = function(arr, key){
	for k,v in arr.fields 
		if key==v return k; 
}
indexOfCol = function(arr, find, col){
	return indexOf(getCol(arr, col), find); 
}
mapAsItem= function(tab, keyCol, vCol){
	var t={}
	for (i=1; #tab)
		t[tab[i][keyCol]]=tab[i][vCol];
	return t; 
}
findValue = function(arr, what){ //一维数组不可用
	for rowIndex, row in arr{
		for colIndex, cellValue in row {
			if !cellValue continue;
			if type(cellValue) == "number"
				cellValue = tostring(cellValue);
			if ..string.find(cellValue, "@" + what)
				return {
					row = rowIndex;
					col = colIndex;
					value = cellValue;
				} 	
		}
	}
	return null; 
}
findString = function(arr, what){ //一维数组专用
	for index, Value in arr {
		if !Value continue;
		if type(Value) == "number"
			Value = tostring(Value);
		if ..string.find(Value, "@@" + what)
			return {
				index = index;
				value = Value;
			} 	
	}
	return null; 
}
findKeyWords = function(arr, what){ //一维数组不可用
	import string.keywords;
	for rowIndex, row in arr{
		for colIndex, cellValue in row {
			if !cellValue continue;
			cellValue = tostring(cellValue);
			if string.keywords(what).findOne(cellValue)
				return {
					row = rowIndex;
					col = colIndex;
					value = cellValue;
				} 
		}
	}
	return null; 
}
indexContains = function(arr, what){
	for k, v in arr
			if ..string.indexOf(v, what)
				return k; 
}
cNum = function(str){
	select type(str) {
		case "number" {
			return str; 
		}
		case "string" {
			var n = tonumber(str);
			if #str !== ..string.len(tostring(n)) return null; 
			return n; 
		}
		case "boolean" {
			return tonumber(str);
		}
		else {
			return null; 
		}
	}


}
clearEmptyRows = function(arr){
	return  ..table.filter(arr, function(v,index){
		return ..table.count(v); // 如果没有[1]键,#操作不能识别数组, 但是count操作包含fields等非数字键
	})
}
countNumKey = function(arr){
	var n = 0;
	for k,v in ..table.eachArgs(arr)
 		if v	n++;
	return n; 
}

fillEmptyCell = function(arr, what = "", colCount){
	colCount := #arr;
	for (i=1; colCount)
		arr[i] = arr[[i]] || what;	//map会忽略null值和键
	return arr; 
}

fillEmptyRow = function(arr, what= ""){
	var	colCount = arr.fields? #arr.fields : #arr[1];
	for (i=1; #arr)
		arr[i] = fillEmptyCell(arr[i], what, colCount);	//map会忽略null值和键
	return arr;
}

trimAll = function(arr){
	return map(arr,function(v,k,result){
		if !v return null;
		v = tostring(v);
		if !len(v) return null;
		if !len(trim(v)) return null;
		return trim(v);
	})
}


/**intellisense()
tarray = array列操作扩展库
tarray.serialize(arr) = 保留fields把index改为数字
tarray.transpose0(arr) = 
tarray.transpose(arr) = 行列转置, 如果转置后只有1行, 变为1维
tarray.mapfields(arr, fields) = 按fields重新定义arr的键名
tarray.popCol(arr) = pop列
tarray.sliceCol(arr,a,b) = slice列
tarray.uniqueCol(arr, col = 1) = unique 时保留fields;
tarray.getCol(arr, key) = 获取指定列的值数组
tarray.replaceValue(arr,searchFor, replaceBy) = 替换指定值,返回新的arr
tarray.drop(arr, index) = 删除指定列,返回新的arr
tarray.pushFields(arr, tab) = 参考tab键名定义arr.fields,返回新的arr
tarray.indexOfCol(arr, find, col) = 在指定col查找find所在的index值
tarray.findValue(arr, what) = 查找值, 返回{row,col,value} \n!tFindItem.
tarray.cNum(str) = 转为数值
tarray.indexContains(single_lvl_arr, what) = 是单层字符串数组内查找指定字符, 返回索引
tarray.findKeyWords(arr, keywords) = keywords用|分隔 \n!tFindItem.
tarray.findString(arr, what) = 查找值, 返回{index, value} \n!tFindStrItem.
!tFindItem.row = 行
!tFindItem.col = 列
!tFindItem.value = 值 
!tFindStrItem.index = index
!tFindStrItem.value = value
end intellisense**/