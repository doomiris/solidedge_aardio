import console; 
import com.excel;

var excel = com.excel( false );
var sht = excel.ActiveWorkbook.ActiveSheet;

_start_lvl = 2;
_Depth = 2;

var UG = sht.UsedRange.value2;

/*取消隐藏行{{*/
sht.UsedRange.Rows.Hidden = false;
try{
	for (i=1; 8)
		sht.UsedRange.Rows.unGroup();
}
/*}}*/

import tarray;

UG.fields = table.shift(UG)
UG = tarray.mapfields(UG);

UG = table.map(UG,function(v,k,result){
	if k = "fields" return ; 
	v.展开层 = tonumber(string.trimleft(v.展开层||"","."));
	v.row = k+1;
	return v; 
})

for(i=1;#UG){
	UG[i]["hasChild"] = UG[i+1] ? UG[i+1]["展开层"] > UG[i]["展开层"] : false;
}



var getParentIndex = function(index){
	for(i=index-1; 1; -1)
		if UG[i]["展开层"] == UG[index]["展开层"]-1
			return i; 
	
}

for(i=2; #UG){
	UG[i]["parent"] = getParentIndex(i);
}


/*
var getChildrenTab = function(index){
	var parent = UG[index];
	if !parent.hasChild return null;
	return table.filter(UG, λ(v,k) v.parent==index );  
}
*/
var getRangeMax = function(index){
	for(i=index+1; #UG)
		if UG[i].展开层 <= UG[index].展开层
			return UG[i].row - 1; 	//发现同级或上级则返回上一行
	return UG[#UG].row; 
	
}
for (i=_start_lvl; _start_lvl+_Depth){
	for(j=1; #UG){
		if UG[j].展开层==i {
			if UG[j].hasChild {
				var min = UG[j+1].row;
				var max = getRangeMax(j);				
				var str = min ++ ":" ++ max;
				//console.log("group:",str)
				sht.Rows(str).Group();
			}
		}
	}
}

console.pause(true);




