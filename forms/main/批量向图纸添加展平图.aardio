import win.ui;
/*DSG{{*/
var winform = win.form(text="批量向图纸添加展平图";right=759;bottom=469)
winform.add(
button={cls="button";text="查找图纸内表格专用号";left=15;top=358;right=141;bottom=388;db=1;dl=1;z=1};
button2={cls="button";text="清空";left=709;top=89;right=744;bottom=119;dr=1;dt=1;z=4};
button3={cls="button";text="展平图加入图纸";left=542;top=389;right=739;bottom=443;db=1;dr=1;z=5};
button4={cls="button";text="查找专用号对应钣金";left=153;top=358;right=269;bottom=388;db=1;dl=1;z=10};
checkbox={cls="checkbox";text="如果没有展平自动展平";left=28;top=399;right=371;bottom=419;checked=1;db=1;dl=1;z=6};
checkbox2={cls="checkbox";text="左对齐/放在图纸上方/添加标题";left=27;top=422;right=370;bottom=442;checked=1;db=1;dl=1;z=8};
combobox={cls="combobox";left=151;top=46;right=710;bottom=72;aw=1;dr=1;dt=1;edge=1;items={};mode="dropdown";z=2};
edit={cls="edit";left=5;top=88;right=131;bottom=354;ah=1;autohscroll=false;border=1;db=1;dl=1;dt=1;font=LOGFONT(h=-13;name='Consolas');multiline=1;z=11};
edit2={cls="edit";left=6;top=47;right=132;bottom=75;autovscroll=false;bgcolor=15780518;dl=1;dt=1;readonly=1;z=7};
listview={cls="listview";left=149;top=88;right=704;bottom=355;acceptfiles=1;aw=1;border=1;db=1;dr=1;dt=1;z=9};
splitter={cls="splitter";left=144;top=88;right=149;bottom=354;ah=1;border=1;db=1;dt=1;edge=1;z=13};
static={cls="static";text="图纸";left=16;top=19;right=128;bottom=41;dl=1;dt=1;transparent=1;z=12};
static2={cls="static";text="在此文件夹查找";left=152;top=18;right=264;bottom=40;dr=1;dt=1;transparent=1;z=3}
)
/*}}*/

import win.ui.grid;
var grid = win.ui.grid(winform.listview)
import config;
winform.bindConfig( config.SE_working_folders,{
	combobox = "items";
} );

winform.splitter.split(
	{winform.static, winform.edit2, winform.edit},
	{winform.static2, winform.listview, winform.combobox}
)
winform.splitter.ltMin = 100;

winform.combobox.saveFolder = function(){
	var path = owner.text;	
	if !io.exist(path) return false; 
	if !table.indexOf(owner.items,path)
		owner.add(path);
	config.SE_working_folders.save();
	return true;
}
winform.combobox.onDropDown = winform.combobox.saveFolder;

var getCurrentDftInfo = function(){
	import solidedge.application;
	var seApp = solidedge.application();
	if seApp.ActiveDocumentType == 2 /*Draft Document Type*/		
		return seApp.ActiveDocument.Name; 
}
winform.edit2.text = thread.invokeAndWait(getCurrentDftInfo);

var getColContent = function(keyword="专用号"){
	import solidedge.application;
	var seApp = solidedge.application();
	if !seApp return {}; 
	if seApp.ActiveDocumentType != 2 /*Draft Document Type*/ return {}; 	
	var dftDoc = seApp.ActiveDocument;
	if !dftDoc return {}; 
	var seTables = dftDoc.Tables;
	var partNumbers = {};

	for (i = 1; seTables.Count) {
    	var seTable = seTables.Item(i);
    	
	   	var colCount = seTable.Columns.Count;
    	var rowCount = seTable.Rows.Count;
    	
    	// 遍历表格的第一行，查找标题中含有"专用号"的列
    	for (col = 1; colCount; 1) {
        	var headerText = seTable.Columns.item(col).HeaderRowValue;
        	if (headerText and string.find(headerText, "专用号")) {
            	// 找到含有"专用号"的列，读取该列的内容
            	for (row = 1; rowCount) {
                	var cellValue = seTable.Cell(row, col).value;
                	if (cellValue) {
                    	table.push(partNumbers, cellValue);
                	}
            	}
        	}
    	}
	}
	return partNumbers; 
}

var findFilesByKeywords = function(keywordList, folderPath) {
    import fsys;
    var fileList = {};
    var files = fsys.list(folderPath, ,"*.psm");

    for (i=1; #files) {
        var fileName = files[i];
        for (i = 1;  #keywordList) {
            if string.startsWith(fileName, keywordList[i], true) {
                table.push(fileList, files[fileName]);
                break;
            }
        }
    }
    return fileList;
};

var addFlatPatterns = function(sheetMetalFiles){
	import solidedge.application;
	//import console;
	var seApp = solidedge.application();
	var dftDoc = seApp.ActiveDocument;
	var activeSheet = dftDoc.ActiveSheet;
	
	// 放置 Flat Pattern
	var yOffset = 0; // 用于垂直偏移以避免重叠
	for (i = 1; #sheetMetalFiles) {
    	var filePath = sheetMetalFiles[i];
    	 //console.log("处理文件: ", filePath);
        	
    	var partDoc = dftDoc.ModelLinks.Add(filePath);
    	if (!partDoc) {
        	//console.error("无法打开文件: ", filePath);
    	}	
    	// 获取 Flat Pattern 模型
    	var flatPatternModel = partDoc.ModelDocument.FlatPatternModels.Item(1);
    	if (!flatPatternModel) {
    	    //console.log("没有找到此文件的flatpattern,尝试创建...", filePath);
    	    import solidedge.SheetMetalDocument;
    	    var psm = seApp.Open(filePath, false);
    	    var sePsm = solidedge.SheetMetalDocument(psm);
    	    var succ = !!sePsm.addFlatPattern();
        	if succ
        		sePsm.close(true);
        	else {
        	    sePsm.close(false);
    	    	//console.error("创建失败了, 请手动创建吧, 此次跳过此文件", filePath);
    	    	continue;
    	    }        	
    	}
    	// 在图纸中放置 Flat Pattern 视图
    	var drawingView = activeSheet.DrawingViews.AddSheetMetalView(
        	partDoc,
        	1, //igTopView
        	1, //scale
        	0, // X 坐标 (左对齐)
        	yOffset, // Y 坐标 (垂直偏移)
        	2 // seSheetMetalFlatView
    	);
		drawingView.CaptionDefinitionTextPrimary = ..io.splitpath(filePath).file;
		drawingView.PrimaryCaptionTextSize = 0.025
    	drawingView.Update();	
    	// 计算下一个视图的垂直偏移（基于视图的高度）
    	var a,b,c,d = drawingView.Range();
    	var viewHeight = d-b;
    	yOffset += viewHeight + 0.05; // 添加一些间距
	}
	return 1; 
}

winform.button.oncommand = function(id,event){
	var pcode = getColContent();
	winform.edit.text = string.join(pcode, '\r\n');
}
var getPsmFileList = function(pcode, path){
	if !path return; 
	if !pcode or !#pcode return ; 
	var pfiles = findFilesByKeywords(pcode, path);
	var ftab = {};
	ftab.fields = {[1] = "name"; [2] = "dir"}
	for (i=1; #pfiles){
		var info = io.splitpath(pfiles[i])
		table.push(ftab, {
			name = info.file;
			dir = info.dir;
			}
		)
	}
	return ftab;
}
winform.button4.oncommand = function(){
	var path = winform.combobox.text;	
	if !io.exist(path) return win.msgboxErr(path,"不存在的位置"); 
	winform.edit.onChange();
}

winform.button3.oncommand = function(id,event){
	var listFile = grid.getTable()
	var psmFiles = {}
	for (i=1; #listFile)
		table.push(psmFiles, io.joinpath(listFile[i][2], listFile[i][1]))
	winform.button3.disabledText = {"✶";"✸";"✹";"✺";"✹";"✷";text = "waiting"}	
	if thread.invokeAndWait(addFlatPatterns,psmFiles)
		winform.button3.disabledText = null;
	
}

winform.show();

if #winform.combobox.items > 0
	winform.combobox.selText = winform.combobox.items[1];

import win.debounce;
winform.edit.onChange = win.debounce(function(){
	var path = winform.combobox.text;	
	if !io.exist(path) return; 
	if !winform.combobox.saveFolder() return; 
	if !winform.edit.text return ; 
	var lines = string.splitEx(winform.edit.text);
	var pcode = {};
	for (i=1; #lines)
		if string.len(string.trim(lines[i]))
			table.push(pcode, string.trim(lines[i]))
	if !#pcode return ; 

	var tab = getPsmFileList(pcode, path);
	grid.setTable(tab);
}, 1000)
{
	var currentTxt = thread.invokeAndWait(getColContent);
	if currentTxt and #currentTxt
		winform.edit.text = string.join(currentTxt, '\r\n');
}
winform.button2.oncommand = function(){
	grid.clear();
}

winform.listview.onDropFiles = function(files){
	import tarray;
	var tab = owner.getTable();
	var t = {}
	for (i=1; #files){
		var info = io.splitpath(files[i]);
		var ext = info.ext;
		if !string.cmp(ext,".psm") continue
		var name = info.file;
		var dir = info.dir;
		
		if !table.find(tarray.getCol(tab, 1), name)
			table.push(tab,	{
					"name" =  name;
					"dir" = dir;
			})
	}
	owner.setTable(tab);
}

winform.edit2.oncommand = function(id,event){
	if event !== 256 return ; 
	winform.edit2.text = getCurrentDftInfo();
}



winform.edit.onChange();

win.loopMessage();