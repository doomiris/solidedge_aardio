import console; 
console.open();
import com.excel;
import tarray;
var excel = com.excel(false);
com.enumRunning( 
	function(displayName,object){
		try{
			var s = com.GetTypeInfo(object).GetDocumentation().name;
			if s = "_Workbook"
			//console.log(s, object.Application.ActiveWorkbook.Name, object.Application.ActiveWindow.hwnd  )
				if object.Application.hwnd > excel.Application.hwnd
					excel = object.Application;
		}
	}
)

var sht = excel.ActiveSheet;
if !sht console.pause("需要重新执行");

import QHC;


/*
if !sht.Columns("B:B").find("BOM项目") return error("不是新BOM申请表"); 
if !sht.Rows("4:4").find("相关性语句") return error("不是最新版申请表"); 
*/
var etab = (function(){
		var fields = {
			"原父项"; "原子项"; "原子项描述"; "原子项数量"; "原子项单位"; "原子项类型"; "更改备注";
			"新父项"; "BOM项目"; "项目类别"; "新子项"; "新子项描述"; "新子项数量"; "新子项单位"; "新子项类型";
			"是否继承";	"继承生效日期";	"是否有OD";

		};

		var etr = function(){
			var f = sht.usedrange.find("B2907F02");
			return f.row - 1; 
		};
		
		if !etr() return error("找不到边界");
		
		var tab = {};
		var eArr = sht.Range("$B$9:$S$" ++ etr()).value2;
		for(i=1; #eArr){    
	    	var d = table.array();
	    	for (j=1;#fields){
	    		d[fields[j]] = eArr[i][j];
			}		
			table.push(tab,d);
		}
		return tab; 
})()

var etab_count = #etab;

var rule_desp = {
	[1] = "前后父项物料不匹配(不要改变原有模版公式)";
	[2] = "项目类别固定值:L";
	[3] = "新增子项:子项需写在右侧";
	[4] = "删除子项:子项需写在左侧";
	[5] = "更改用量:前后相同";
	[6] = "用量:小数位数不超过3位 (手动删除或使用round函数, 直接调整显示状态也不行)";
	[7] = "ZA单位对应数量应该是整数";
	[8] = "物料类型/单位与SAP内不一致"; 
	[9] = "ROH不可有下级物料"; 
	[10] = "单位用量错误: 非数字/没填/0值"; 
	[11] = "给09组新增子项时确认是否有OD"; 
}

var sapErr = {
	[1] = function(i){
		return etab[i].原父项!==etab[i].新父项; 
	};
	[2]=function(i){
		return etab[i].项目类别!=="L"; 
	};
	[3]=function(i){
		if etab[i].更改备注 == "新增子项" or etab[i].更改备注 == "新增BOM"
			return #etab[i].原子项 and !#etab[i].新子项;
	};
	[4]=function(i){
		if etab[i].更改备注=="删除BOM" or etab[i].更改备注=="删除子项"
			return !#etab[i].原子项 and #etab[i].新子项;
	};
	[5]=function(i){
		if etab[i].更改备注 == "更改用量"
			return etab[i].原子项数量 == etab[i].新子项数量; 
	};
	[6]=function(i){
		if etab[i].更改备注=="删除BOM" or etab[i].更改备注=="删除子项" return;
		var n = tarray.cNum(etab[i].新子项数量);
		var x, y
		if n
			x, y = math.modf(n);
		if y
			return string.len(tostring(y))>(3+2/* modf 小数部分是真的是小数 0.开头*/); 
	};
	[7]=function(i){
		if etab[i].更改备注=="删除BOM" or etab[i].更改备注=="删除子项" return;
		if etab[i].新子项单位  == "ZA"
			if !string.indexOf(etab[i].新子项描述,"胶带")
					return !math.isInteger(tarray.cNum(etab[i].新子项数量));  
	};
	[8]=function(i){
	};
	[9]=function(i){
	};
	[10]=function(i){
		if etab[i].更改备注=="删除BOM" or etab[i].更改备注=="删除子项" return;
		if etab[i].新子项数量 return !(tarray.cNum(etab[i].新子项数量))
		else return true; 
	};
	[11]=function(i){
		if string.startWith(etab[i].原父项,"H00809")
			return etab[i].是否有OD !== "√"
	};
};


import console.progress;
var bar = console.progress();

var getErr = {};
console.log(sht.parent.name)
for(i=1; etab_count){
	bar.setProgress(math.round(i*100/etab_count), math.round(i*100/etab_count) + "% processing......");
	if !#etab[i].原父项 continue;
	for(j=1; #sapErr){
		if sapErr[j](i)
			table.push(getErr, {errRow=i; errRule=j});
	};
}
if !#getErr console.log("插件未发现错误.");
else
	for(i=1; #getErr){
		console.log("第" ++ (getErr[i].errRow + 8) ++ "行, ", rule_desp[getErr[i].errRule]);
	}

console.pause(true);